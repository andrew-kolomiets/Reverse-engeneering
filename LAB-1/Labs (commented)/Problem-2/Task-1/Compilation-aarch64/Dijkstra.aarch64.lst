   1              		.arch armv8-a
   2              		.file	"Dijkstra.c"
   3              		.text
   4              	.Ltext0:
   5              		.align	2
   6              		.global	minDistance
   8              	minDistance:
   9              	.LFB6:
  10              		.file 1 "Dijkstra.c"
   1:Dijkstra.c    **** // A C++ program for Dijkstra's single source shortest path algorithm.
   2:Dijkstra.c    **** // The program is for adjacency matrix representation of the graph
   3:Dijkstra.c    **** 
   4:Dijkstra.c    **** #include <limits.h>
   5:Dijkstra.c    **** #include <stdlib.h>
   6:Dijkstra.c    **** #include <stdbool.h>
   7:Dijkstra.c    **** #include <stdio.h>
   8:Dijkstra.c    **** 
   9:Dijkstra.c    **** // Number of vertices in the graph
  10:Dijkstra.c    **** #define V 9
  11:Dijkstra.c    **** 
  12:Dijkstra.c    **** // A utility function to find the vertex with minimum distance value, from
  13:Dijkstra.c    **** // the set of vertices not yet included in shortest path tree
  14:Dijkstra.c    **** int minDistance(int dist[],bool sptSet[])
  15:Dijkstra.c    **** {
  11              		.loc 1 15 1
  12              		.cfi_startproc
  13 0000 FF8300D1 		sub	sp, sp, #32
  14              		.cfi_def_cfa_offset 32
  15 0004 E00700F9 		str	x0, [sp, 8]
  16 0008 E10300F9 		str	x1, [sp]
  16:Dijkstra.c    **** 	// Initialize min value
  17:Dijkstra.c    **** 	int min = INT_MAX, min_index;
  17              		.loc 1 17 6
  18 000c 0000B012 		mov	w0, 2147483647
  19 0010 E01700B9 		str	w0, [sp, 20]
  20              	.LBB2:
  18:Dijkstra.c    **** 
  19:Dijkstra.c    **** 	for (int v = 0; v < V; v++)
  21              		.loc 1 19 11
  22 0014 FF1F00B9 		str	wzr, [sp, 28]
  23              		.loc 1 19 2
  24 0018 1C000014 		b	.L2
  25              	.L4:
  20:Dijkstra.c    **** 		if (sptSet[v] == false && dist[v] <= min)
  26              		.loc 1 20 13
  27 001c E01F80B9 		ldrsw	x0, [sp, 28]
  28 0020 E10340F9 		ldr	x1, [sp]
  29 0024 2000008B 		add	x0, x1, x0
  30 0028 00004039 		ldrb	w0, [x0]
  31              		.loc 1 20 17
  32 002c 00000052 		eor	w0, w0, 1
  33 0030 001C0012 		and	w0, w0, 255
  34              		.loc 1 20 6
  35 0034 1F000071 		cmp	w0, 0
  36 0038 20020054 		beq	.L3
  37              		.loc 1 20 33 discriminator 1
  38 003c E01F80B9 		ldrsw	x0, [sp, 28]
  39 0040 00F47ED3 		lsl	x0, x0, 2
  40 0044 E10740F9 		ldr	x1, [sp, 8]
  41 0048 2000008B 		add	x0, x1, x0
  42 004c 000040B9 		ldr	w0, [x0]
  43              		.loc 1 20 26 discriminator 1
  44 0050 E11740B9 		ldr	w1, [sp, 20]
  45 0054 3F00006B 		cmp	w1, w0
  46 0058 2B010054 		blt	.L3
  21:Dijkstra.c    **** 			min = dist[v], min_index = v;
  47              		.loc 1 21 14
  48 005c E01F80B9 		ldrsw	x0, [sp, 28]
  49 0060 00F47ED3 		lsl	x0, x0, 2
  50 0064 E10740F9 		ldr	x1, [sp, 8]
  51 0068 2000008B 		add	x0, x1, x0
  52              		.loc 1 21 8
  53 006c 000040B9 		ldr	w0, [x0]
  54 0070 E01700B9 		str	w0, [sp, 20]
  55              		.loc 1 21 29
  56 0074 E01F40B9 		ldr	w0, [sp, 28]
  57 0078 E01B00B9 		str	w0, [sp, 24]
  58              	.L3:
  19:Dijkstra.c    **** 		if (sptSet[v] == false && dist[v] <= min)
  59              		.loc 1 19 26 discriminator 2
  60 007c E01F40B9 		ldr	w0, [sp, 28]
  61 0080 00040011 		add	w0, w0, 1
  62 0084 E01F00B9 		str	w0, [sp, 28]
  63              	.L2:
  19:Dijkstra.c    **** 		if (sptSet[v] == false && dist[v] <= min)
  64              		.loc 1 19 2 discriminator 1
  65 0088 E01F40B9 		ldr	w0, [sp, 28]
  66 008c 1F200071 		cmp	w0, 8
  67 0090 6DFCFF54 		ble	.L4
  68              	.LBE2:
  22:Dijkstra.c    **** 
  23:Dijkstra.c    **** 	return min_index;
  69              		.loc 1 23 9
  70 0094 E01B40B9 		ldr	w0, [sp, 24]
  24:Dijkstra.c    **** }
  71              		.loc 1 24 1
  72 0098 FF830091 		add	sp, sp, 32
  73              		.cfi_def_cfa_offset 0
  74 009c C0035FD6 		ret
  75              		.cfi_endproc
  76              	.LFE6:
  78              		.section	.rodata
  79              		.align	3
  80              	.LC1:
  81 0000 56657274 		.string	"Vertex Distance from Source"
  81      65782044 
  81      69737461 
  81      6E636520 
  81      66726F6D 
  82 001c 00000000 		.align	3
  83              	.LC2:
  84 0020 25642009 		.string	"%d \t\t %d\n"
  84      09202564 
  84      0A00
  85              		.text
  86              		.align	2
  87              		.global	printSolution
  89              	printSolution:
  90              	.LFB7:
  25:Dijkstra.c    **** 
  26:Dijkstra.c    **** // A utility function to print the constructed distance array
  27:Dijkstra.c    **** int printSolution(int dist[], int n)
  28:Dijkstra.c    **** {
  91              		.loc 1 28 1
  92              		.cfi_startproc
  93 00a0 FD7BBDA9 		stp	x29, x30, [sp, -48]!
  94              		.cfi_def_cfa_offset 48
  95              		.cfi_offset 29, -48
  96              		.cfi_offset 30, -40
  97 00a4 FD030091 		mov	x29, sp
  98 00a8 E00F00F9 		str	x0, [sp, 24]
  99 00ac E11700B9 		str	w1, [sp, 20]
  29:Dijkstra.c    **** 	printf("Vertex Distance from Source\n");
 100              		.loc 1 29 2
 101 00b0 00000090 		adrp	x0, .LC1
 102 00b4 00000091 		add	x0, x0, :lo12:.LC1
 103 00b8 00000094 		bl	puts
 104              	.LBB3:
  30:Dijkstra.c    **** 	for (int i = 0; i < V; i++)
 105              		.loc 1 30 11
 106 00bc FF2F00B9 		str	wzr, [sp, 44]
 107              		.loc 1 30 2
 108 00c0 0E000014 		b	.L7
 109              	.L8:
  31:Dijkstra.c    **** 		printf("%d \t\t %d\n", i, dist[i]);
 110              		.loc 1 31 33 discriminator 3
 111 00c4 E02F80B9 		ldrsw	x0, [sp, 44]
 112 00c8 00F47ED3 		lsl	x0, x0, 2
 113 00cc E10F40F9 		ldr	x1, [sp, 24]
 114 00d0 2000008B 		add	x0, x1, x0
 115              		.loc 1 31 3 discriminator 3
 116 00d4 000040B9 		ldr	w0, [x0]
 117 00d8 E203002A 		mov	w2, w0
 118 00dc E12F40B9 		ldr	w1, [sp, 44]
 119 00e0 00000090 		adrp	x0, .LC2
 120 00e4 00000091 		add	x0, x0, :lo12:.LC2
 121 00e8 00000094 		bl	printf
  30:Dijkstra.c    **** 	for (int i = 0; i < V; i++)
 122              		.loc 1 30 26 discriminator 3
 123 00ec E02F40B9 		ldr	w0, [sp, 44]
 124 00f0 00040011 		add	w0, w0, 1
 125 00f4 E02F00B9 		str	w0, [sp, 44]
 126              	.L7:
  30:Dijkstra.c    **** 	for (int i = 0; i < V; i++)
 127              		.loc 1 30 2 discriminator 1
 128 00f8 E02F40B9 		ldr	w0, [sp, 44]
 129 00fc 1F200071 		cmp	w0, 8
 130 0100 2DFEFF54 		ble	.L8
 131              	.LBE3:
  32:Dijkstra.c    **** }
 132              		.loc 1 32 1
 133 0104 1F2003D5 		nop
 134 0108 FD7BC3A8 		ldp	x29, x30, [sp], 48
 135              		.cfi_restore 30
 136              		.cfi_restore 29
 137              		.cfi_def_cfa_offset 0
 138 010c C0035FD6 		ret
 139              		.cfi_endproc
 140              	.LFE7:
 142              		.align	2
 143              		.global	dijkstra
 145              	dijkstra:
 146              	.LFB8:
  33:Dijkstra.c    **** 
  34:Dijkstra.c    **** // Function that implements Dijkstra's single source shortest path algorithm
  35:Dijkstra.c    **** // for a graph represented using adjacency matrix representation
  36:Dijkstra.c    **** void dijkstra(int graph[V][V], int src)
  37:Dijkstra.c    **** {
 147              		.loc 1 37 1
 148              		.cfi_startproc
 149 0110 FD7BB9A9 		stp	x29, x30, [sp, -112]!
 150              		.cfi_def_cfa_offset 112
 151              		.cfi_offset 29, -112
 152              		.cfi_offset 30, -104
 153 0114 FD030091 		mov	x29, sp
 154 0118 E00F00F9 		str	x0, [sp, 24]
 155 011c E11700B9 		str	w1, [sp, 20]
 156              		.loc 1 37 1
 157 0120 00000090 		adrp	x0, :got:__stack_chk_guard
 158 0124 000040F9 		ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
 159 0128 010040F9 		ldr	x1, [x0]
 160 012c E13700F9 		str	x1, [sp, 104]
 161 0130 010080D2 		mov	x1,0
 162              	.LBB4:
  38:Dijkstra.c    **** 	int dist[V]; // The output array. dist[i] will hold the shortest
  39:Dijkstra.c    **** 	// distance from src to i
  40:Dijkstra.c    **** 
  41:Dijkstra.c    **** 	bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest
  42:Dijkstra.c    **** 	// path tree or shortest distance from src to i is finalized
  43:Dijkstra.c    **** 
  44:Dijkstra.c    **** 	// Initialize all distances as INFINITE and stpSet[] as false
  45:Dijkstra.c    **** 	for (int i = 0; i < V; i++)
 163              		.loc 1 45 11
 164 0134 FF2300B9 		str	wzr, [sp, 32]
 165              		.loc 1 45 2
 166 0138 0C000014 		b	.L10
 167              	.L11:
  46:Dijkstra.c    **** 		dist[i] = INT_MAX, sptSet[i] =0;
 168              		.loc 1 46 11 discriminator 3
 169 013c E02380B9 		ldrsw	x0, [sp, 32]
 170 0140 00F47ED3 		lsl	x0, x0, 2
 171 0144 E1030191 		add	x1, sp, 64
 172 0148 0200B012 		mov	w2, 2147483647
 173 014c 226820B8 		str	w2, [x1, x0]
 174              		.loc 1 46 32 discriminator 3
 175 0150 E02380B9 		ldrsw	x0, [sp, 32]
 176 0154 E1C30091 		add	x1, sp, 48
 177 0158 3F682038 		strb	wzr, [x1, x0]
  45:Dijkstra.c    **** 		dist[i] = INT_MAX, sptSet[i] =0;
 178              		.loc 1 45 26 discriminator 3
 179 015c E02340B9 		ldr	w0, [sp, 32]
 180 0160 00040011 		add	w0, w0, 1
 181 0164 E02300B9 		str	w0, [sp, 32]
 182              	.L10:
  45:Dijkstra.c    **** 		dist[i] = INT_MAX, sptSet[i] =0;
 183              		.loc 1 45 2 discriminator 1
 184 0168 E02340B9 		ldr	w0, [sp, 32]
 185 016c 1F200071 		cmp	w0, 8
 186 0170 6DFEFF54 		ble	.L11
 187              	.LBE4:
  47:Dijkstra.c    **** 
  48:Dijkstra.c    **** 	// Distance of source vertex from itself is always 0
  49:Dijkstra.c    **** 	dist[src] = 0;
 188              		.loc 1 49 12
 189 0174 E01780B9 		ldrsw	x0, [sp, 20]
 190 0178 00F47ED3 		lsl	x0, x0, 2
 191 017c E1030191 		add	x1, sp, 64
 192 0180 3F6820B8 		str	wzr, [x1, x0]
 193              	.LBB5:
  50:Dijkstra.c    **** 
  51:Dijkstra.c    **** 	// Find shortest path for all vertices
  52:Dijkstra.c    **** 	for (int count = 0; count < V - 1; count++) {
 194              		.loc 1 52 11
 195 0184 FF2700B9 		str	wzr, [sp, 36]
 196              		.loc 1 52 2
 197 0188 56000014 		b	.L12
 198              	.L16:
 199              	.LBB6:
  53:Dijkstra.c    **** 		// Pick the minimum distance vertex from the set of vertices not
  54:Dijkstra.c    **** 		// yet processed. u is always equal to src in the first iteration.
  55:Dijkstra.c    **** 		int u = minDistance(dist, sptSet);
 200              		.loc 1 55 11
 201 018c E1C30091 		add	x1, sp, 48
 202 0190 E0030191 		add	x0, sp, 64
 203 0194 00000094 		bl	minDistance
 204 0198 E02F00B9 		str	w0, [sp, 44]
  56:Dijkstra.c    **** 
  57:Dijkstra.c    **** 		// Mark the picked vertex as processed
  58:Dijkstra.c    **** 		sptSet[u] = true;
 205              		.loc 1 58 13
 206 019c E02F80B9 		ldrsw	x0, [sp, 44]
 207 01a0 E1C30091 		add	x1, sp, 48
 208 01a4 22008052 		mov	w2, 1
 209 01a8 22682038 		strb	w2, [x1, x0]
 210              	.LBB7:
  59:Dijkstra.c    **** 
  60:Dijkstra.c    **** 		// Update dist value of the adjacent vertices of the picked vertex.
  61:Dijkstra.c    **** 		for (int v = 0; v < V; v++)
 211              		.loc 1 61 12
 212 01ac FF2B00B9 		str	wzr, [sp, 40]
 213              		.loc 1 61 3
 214 01b0 46000014 		b	.L13
 215              	.L15:
  62:Dijkstra.c    **** 
  63:Dijkstra.c    **** 			// Update dist[v] only if is not in sptSet, there is an edge from
  64:Dijkstra.c    **** 			// u to v, and total weight of path from src to v through u is
  65:Dijkstra.c    **** 			// smaller than current value of dist[v]
  66:Dijkstra.c    **** 			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
 216              		.loc 1 66 15
 217 01b4 E02B80B9 		ldrsw	x0, [sp, 40]
 218 01b8 E1C30091 		add	x1, sp, 48
 219 01bc 20686038 		ldrb	w0, [x1, x0]
 220              		.loc 1 66 8
 221 01c0 00000052 		eor	w0, w0, 1
 222 01c4 001C0012 		and	w0, w0, 255
 223              		.loc 1 66 7
 224 01c8 1F000071 		cmp	w0, 0
 225 01cc 80070054 		beq	.L14
 226              		.loc 1 66 27 discriminator 1
 227 01d0 E12F80B9 		ldrsw	x1, [sp, 44]
 228 01d4 E00301AA 		mov	x0, x1
 229 01d8 00F07DD3 		lsl	x0, x0, 3
 230 01dc 0000018B 		add	x0, x0, x1
 231 01e0 00F47ED3 		lsl	x0, x0, 2
 232 01e4 E10300AA 		mov	x1, x0
 233 01e8 E00F40F9 		ldr	x0, [sp, 24]
 234 01ec 0000018B 		add	x0, x0, x1
 235              		.loc 1 66 30 discriminator 1
 236 01f0 E12B80B9 		ldrsw	x1, [sp, 40]
 237 01f4 007861B8 		ldr	w0, [x0, x1, lsl 2]
 238              		.loc 1 66 19 discriminator 1
 239 01f8 1F000071 		cmp	w0, 0
 240 01fc 00060054 		beq	.L14
 241              		.loc 1 66 41 discriminator 2
 242 0200 E02F80B9 		ldrsw	x0, [sp, 44]
 243 0204 00F47ED3 		lsl	x0, x0, 2
 244 0208 E1030191 		add	x1, sp, 64
 245 020c 216860B8 		ldr	w1, [x1, x0]
 246              		.loc 1 66 34 discriminator 2
 247 0210 0000B012 		mov	w0, 2147483647
 248 0214 3F00006B 		cmp	w1, w0
 249 0218 20050054 		beq	.L14
  67:Dijkstra.c    **** 				&& dist[u] + graph[u][v] < dist[v])
 250              		.loc 1 67 12
 251 021c E02F80B9 		ldrsw	x0, [sp, 44]
 252 0220 00F47ED3 		lsl	x0, x0, 2
 253 0224 E1030191 		add	x1, sp, 64
 254 0228 226860B8 		ldr	w2, [x1, x0]
 255              		.loc 1 67 23
 256 022c E12F80B9 		ldrsw	x1, [sp, 44]
 257 0230 E00301AA 		mov	x0, x1
 258 0234 00F07DD3 		lsl	x0, x0, 3
 259 0238 0000018B 		add	x0, x0, x1
 260 023c 00F47ED3 		lsl	x0, x0, 2
 261 0240 E10300AA 		mov	x1, x0
 262 0244 E00F40F9 		ldr	x0, [sp, 24]
 263 0248 0000018B 		add	x0, x0, x1
 264              		.loc 1 67 26
 265 024c E12B80B9 		ldrsw	x1, [sp, 40]
 266 0250 007861B8 		ldr	w0, [x0, x1, lsl 2]
 267              		.loc 1 67 16
 268 0254 4100000B 		add	w1, w2, w0
 269              		.loc 1 67 36
 270 0258 E02B80B9 		ldrsw	x0, [sp, 40]
 271 025c 00F47ED3 		lsl	x0, x0, 2
 272 0260 E2030191 		add	x2, sp, 64
 273 0264 406860B8 		ldr	w0, [x2, x0]
 274              		.loc 1 67 5
 275 0268 3F00006B 		cmp	w1, w0
 276 026c 8A020054 		bge	.L14
  68:Dijkstra.c    **** 				dist[v] = dist[u] + graph[u][v];
 277              		.loc 1 68 19
 278 0270 E02F80B9 		ldrsw	x0, [sp, 44]
 279 0274 00F47ED3 		lsl	x0, x0, 2
 280 0278 E1030191 		add	x1, sp, 64
 281 027c 226860B8 		ldr	w2, [x1, x0]
 282              		.loc 1 68 30
 283 0280 E12F80B9 		ldrsw	x1, [sp, 44]
 284 0284 E00301AA 		mov	x0, x1
 285 0288 00F07DD3 		lsl	x0, x0, 3
 286 028c 0000018B 		add	x0, x0, x1
 287 0290 00F47ED3 		lsl	x0, x0, 2
 288 0294 E10300AA 		mov	x1, x0
 289 0298 E00F40F9 		ldr	x0, [sp, 24]
 290 029c 0000018B 		add	x0, x0, x1
 291              		.loc 1 68 33
 292 02a0 E12B80B9 		ldrsw	x1, [sp, 40]
 293 02a4 007861B8 		ldr	w0, [x0, x1, lsl 2]
 294              		.loc 1 68 23
 295 02a8 4200000B 		add	w2, w2, w0
 296              		.loc 1 68 13
 297 02ac E02B80B9 		ldrsw	x0, [sp, 40]
 298 02b0 00F47ED3 		lsl	x0, x0, 2
 299 02b4 E1030191 		add	x1, sp, 64
 300 02b8 226820B8 		str	w2, [x1, x0]
 301              	.L14:
  61:Dijkstra.c    **** 
 302              		.loc 1 61 27 discriminator 2
 303 02bc E02B40B9 		ldr	w0, [sp, 40]
 304 02c0 00040011 		add	w0, w0, 1
 305 02c4 E02B00B9 		str	w0, [sp, 40]
 306              	.L13:
  61:Dijkstra.c    **** 
 307              		.loc 1 61 3 discriminator 1
 308 02c8 E02B40B9 		ldr	w0, [sp, 40]
 309 02cc 1F200071 		cmp	w0, 8
 310 02d0 2DF7FF54 		ble	.L15
 311              	.LBE7:
 312              	.LBE6:
  52:Dijkstra.c    **** 		// Pick the minimum distance vertex from the set of vertices not
 313              		.loc 1 52 42 discriminator 2
 314 02d4 E02740B9 		ldr	w0, [sp, 36]
 315 02d8 00040011 		add	w0, w0, 1
 316 02dc E02700B9 		str	w0, [sp, 36]
 317              	.L12:
  52:Dijkstra.c    **** 		// Pick the minimum distance vertex from the set of vertices not
 318              		.loc 1 52 2 discriminator 1
 319 02e0 E02740B9 		ldr	w0, [sp, 36]
 320 02e4 1F1C0071 		cmp	w0, 7
 321 02e8 2DF5FF54 		ble	.L16
 322              	.LBE5:
  69:Dijkstra.c    **** 	}
  70:Dijkstra.c    **** 
  71:Dijkstra.c    **** 	// print the constructed distance array
  72:Dijkstra.c    **** 	printSolution(dist, V);
 323              		.loc 1 72 2
 324 02ec E0030191 		add	x0, sp, 64
 325 02f0 21018052 		mov	w1, 9
 326 02f4 00000094 		bl	printSolution
  73:Dijkstra.c    **** }
 327              		.loc 1 73 1
 328 02f8 1F2003D5 		nop
 329 02fc 00000090 		adrp	x0, :got:__stack_chk_guard
 330 0300 000040F9 		ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
 331 0304 E13740F9 		ldr	x1, [sp, 104]
 332 0308 020040F9 		ldr	x2, [x0]
 333 030c 210002EB 		subs	x1, x1, x2
 334 0310 020080D2 		mov	x2, 0
 335 0314 40000054 		beq	.L17
 336 0318 00000094 		bl	__stack_chk_fail
 337              	.L17:
 338 031c FD7BC7A8 		ldp	x29, x30, [sp], 112
 339              		.cfi_restore 30
 340              		.cfi_restore 29
 341              		.cfi_def_cfa_offset 0
 342 0320 C0035FD6 		ret
 343              		.cfi_endproc
 344              	.LFE8:
 346              		.align	2
 347              		.global	main
 349              	main:
 350              	.LFB9:
  74:Dijkstra.c    **** 
  75:Dijkstra.c    **** // driver program to test above function
  76:Dijkstra.c    **** int main()
  77:Dijkstra.c    **** {
 351              		.loc 1 77 1
 352              		.cfi_startproc
 353 0324 FD7BAAA9 		stp	x29, x30, [sp, -352]!
 354              		.cfi_def_cfa_offset 352
 355              		.cfi_offset 29, -352
 356              		.cfi_offset 30, -344
 357 0328 FD030091 		mov	x29, sp
 358              		.loc 1 77 1
 359 032c 00000090 		adrp	x0, :got:__stack_chk_guard
 360 0330 000040F9 		ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
 361 0334 010040F9 		ldr	x1, [x0]
 362 0338 E1AF00F9 		str	x1, [sp, 344]
 363 033c 010080D2 		mov	x1,0
  78:Dijkstra.c    **** 	/* Let us create the example graph discussed above */
  79:Dijkstra.c    **** 	int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
 364              		.loc 1 79 6
 365 0340 00000090 		adrp	x0, .LC0
 366 0344 01000091 		add	x1, x0, :lo12:.LC0
 367 0348 E0430091 		add	x0, sp, 16
 368 034c E30301AA 		mov	x3, x1
 369 0350 812880D2 		mov	x1, 324
 370 0354 E20301AA 		mov	x2, x1
 371 0358 E10303AA 		mov	x1, x3
 372 035c 00000094 		bl	memcpy
  80:Dijkstra.c    **** 						{ 4, 0, 8, 0, 0, 0, 0, 11, 0 },
  81:Dijkstra.c    **** 						{ 0, 8, 0, 7, 0, 4, 0, 0, 2 },
  82:Dijkstra.c    **** 						{ 0, 0, 7, 0, 9, 14, 0, 0, 0 },
  83:Dijkstra.c    **** 						{ 0, 0, 0, 9, 0, 10, 0, 0, 0 },
  84:Dijkstra.c    **** 						{ 0, 0, 4, 14, 10, 0, 2, 0, 0 },
  85:Dijkstra.c    **** 						{ 0, 0, 0, 0, 0, 2, 0, 1, 6 },
  86:Dijkstra.c    **** 						{ 8, 11, 0, 0, 0, 0, 1, 0, 7 },
  87:Dijkstra.c    **** 						{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
  88:Dijkstra.c    **** 
  89:Dijkstra.c    **** 	dijkstra(graph, 0);
 373              		.loc 1 89 2
 374 0360 E0430091 		add	x0, sp, 16
 375 0364 01008052 		mov	w1, 0
 376 0368 00000094 		bl	dijkstra
  90:Dijkstra.c    **** 
  91:Dijkstra.c    **** 	return 0;
 377              		.loc 1 91 9
 378 036c 00008052 		mov	w0, 0
 379 0370 E103002A 		mov	w1, w0
  92:Dijkstra.c    **** }
 380              		.loc 1 92 1
 381 0374 00000090 		adrp	x0, :got:__stack_chk_guard
 382 0378 000040F9 		ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
 383 037c E2AF40F9 		ldr	x2, [sp, 344]
 384 0380 030040F9 		ldr	x3, [x0]
 385 0384 420003EB 		subs	x2, x2, x3
 386 0388 030080D2 		mov	x3, 0
 387 038c 40000054 		beq	.L20
 388 0390 00000094 		bl	__stack_chk_fail
 389              	.L20:
 390 0394 E003012A 		mov	w0, w1
 391 0398 FD7BD6A8 		ldp	x29, x30, [sp], 352
 392              		.cfi_restore 30
 393              		.cfi_restore 29
 394              		.cfi_def_cfa_offset 0
 395 039c C0035FD6 		ret
 396              		.cfi_endproc
 397              	.LFE9:
 399              		.section	.rodata
 400 002a 00000000 		.align	3
 400      0000
 401              	.LC0:
 402 0030 00000000 		.word	0
 403 0034 04000000 		.word	4
 404 0038 00000000 		.word	0
 405 003c 00000000 		.word	0
 406 0040 00000000 		.word	0
 407 0044 00000000 		.word	0
 408 0048 00000000 		.word	0
 409 004c 08000000 		.word	8
 410 0050 00000000 		.word	0
 411 0054 04000000 		.word	4
 412 0058 00000000 		.word	0
 413 005c 08000000 		.word	8
 414 0060 00000000 		.word	0
 415 0064 00000000 		.word	0
 416 0068 00000000 		.word	0
 417 006c 00000000 		.word	0
 418 0070 0B000000 		.word	11
 419 0074 00000000 		.word	0
 420 0078 00000000 		.word	0
 421 007c 08000000 		.word	8
 422 0080 00000000 		.word	0
 423 0084 07000000 		.word	7
 424 0088 00000000 		.word	0
 425 008c 04000000 		.word	4
 426 0090 00000000 		.word	0
 427 0094 00000000 		.word	0
 428 0098 02000000 		.word	2
 429 009c 00000000 		.word	0
 430 00a0 00000000 		.word	0
 431 00a4 07000000 		.word	7
 432 00a8 00000000 		.word	0
 433 00ac 09000000 		.word	9
 434 00b0 0E000000 		.word	14
 435 00b4 00000000 		.word	0
 436 00b8 00000000 		.word	0
 437 00bc 00000000 		.word	0
 438 00c0 00000000 		.word	0
 439 00c4 00000000 		.word	0
 440 00c8 00000000 		.word	0
 441 00cc 09000000 		.word	9
 442 00d0 00000000 		.word	0
 443 00d4 0A000000 		.word	10
 444 00d8 00000000 		.word	0
 445 00dc 00000000 		.word	0
 446 00e0 00000000 		.word	0
 447 00e4 00000000 		.word	0
 448 00e8 00000000 		.word	0
 449 00ec 04000000 		.word	4
 450 00f0 0E000000 		.word	14
 451 00f4 0A000000 		.word	10
 452 00f8 00000000 		.word	0
 453 00fc 02000000 		.word	2
 454 0100 00000000 		.word	0
 455 0104 00000000 		.word	0
 456 0108 00000000 		.word	0
 457 010c 00000000 		.word	0
 458 0110 00000000 		.word	0
 459 0114 00000000 		.word	0
 460 0118 00000000 		.word	0
 461 011c 02000000 		.word	2
 462 0120 00000000 		.word	0
 463 0124 01000000 		.word	1
 464 0128 06000000 		.word	6
 465 012c 08000000 		.word	8
 466 0130 0B000000 		.word	11
 467 0134 00000000 		.word	0
 468 0138 00000000 		.word	0
 469 013c 00000000 		.word	0
 470 0140 00000000 		.word	0
 471 0144 01000000 		.word	1
 472 0148 00000000 		.word	0
 473 014c 07000000 		.word	7
 474 0150 00000000 		.word	0
 475 0154 00000000 		.word	0
 476 0158 02000000 		.word	2
 477 015c 00000000 		.word	0
 478 0160 00000000 		.word	0
 479 0164 00000000 		.word	0
 480 0168 06000000 		.word	6
 481 016c 07000000 		.word	7
 482 0170 00000000 		.word	0
 483              		.text
 484              	.Letext0:
 485              		.file 2 "/usr/lib/gcc-cross/aarch64-linux-gnu/9/include/stddef.h"
 486              		.file 3 "/usr/aarch64-linux-gnu/include/bits/types.h"
 487              		.file 4 "/usr/aarch64-linux-gnu/include/bits/types/struct_FILE.h"
 488              		.file 5 "/usr/aarch64-linux-gnu/include/bits/types/FILE.h"
 489              		.file 6 "/usr/aarch64-linux-gnu/include/stdio.h"
 490              		.file 7 "/usr/aarch64-linux-gnu/include/bits/sys_errlist.h"
